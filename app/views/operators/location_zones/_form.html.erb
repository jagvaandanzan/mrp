<% provide :head_tags do %>
  <script type="text/javascript"
          src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_KEY'] %>&libraries=places"></script>
<% end %>
<div class="content-wrapper">
  <section class="content">
    <div class="box box-info">
      <%= form_with model: @location_zone, url: @location_zone.persisted? ? operators_location_zone_path : operators_location_zones_path, method: @location_zone.persisted? ? :patch : :post, local: true, :html => {class: 'form-horizontal'} do |f| %>
        <%= form_body do %>
          <div class="form-group">
            <%= f.label :name, class: 'col-sm-3 control-label' %>
            <div class="col-sm-9 <%= get_error_class(@location_zone, :name) %>">
              <%= field_errors(@location_zone, :name) %>
              <%= f.text_field :name, class: 'form-control', placeholder: t('activerecord.attributes.location_zone.name') %>
            </div>
          </div>
          <div class="form-group">
            <%= f.label :queue, class: 'col-sm-3 control-label' %>
            <div class="col-sm-9 <%= get_error_class(@location_zone, :queue) %>">
              <%= field_errors(@location_zone, :queue) %>
              <%= f.text_field :queue, class: 'form-control', placeholder: t('activerecord.attributes.location_zone.queue') %>
            </div>
          </div>
          <%= f.hidden_field :lat_l_t, id: 'lat_l_t' %>
          <%= f.hidden_field :lng_l_t, id: 'lng_l_t' %>
          <%= f.hidden_field :lat_l_b, id: 'lat_l_b' %>
          <%= f.hidden_field :lng_l_b, id: 'lng_l_b' %>
          <%= f.hidden_field :lat_r_t, id: 'lat_r_t' %>
          <%= f.hidden_field :lng_r_t, id: 'lng_r_t' %>
          <%= f.hidden_field :lat_r_b, id: 'lat_r_b' %>
          <%= f.hidden_field :lng_r_b, id: 'lng_r_b' %>
          <div class="form-group">
            <div class="col-sm-12">
              <div id="map"></div>
            </div>
          </div>
          <div class="action-buttons">
            <%= f.submit t('controls.button.save'), class: 'btn btn-warning' %>
          </div>
        <% end %>
      <% end %>
    </div>
  </section>
</div>
<script>
    var map = null, marker = [], point = [], flightPath = null;

    function initMap() {
        let lat_l_t = document.getElementById('lat_l_t').value;
        let lng_l_t = document.getElementById('lng_l_t').value;
        let lat_l_b = document.getElementById('lat_l_b').value;
        let lng_r_b = document.getElementById('lng_r_b').value;

        point[0] = new google.maps.LatLng(lat_l_t, lng_l_t);
        point[1] = new google.maps.LatLng(lat_l_b, document.getElementById('lng_l_b').value);
        point[2] = new google.maps.LatLng(document.getElementById('lat_r_b').value, lng_r_b);
        point[3] = new google.maps.LatLng(document.getElementById('lat_r_t').value, document.getElementById('lng_r_t').value);

        let center_point = new google.maps.LatLng((parseFloat(lat_l_t) + parseFloat(lat_l_b)) / 2, (parseFloat(lng_l_t) + parseFloat(lng_r_b)) / 2);
        let mapOptions = {
            center: center_point,
            zoom: 16,
            mapTypeId: 'hybrid',
            output: 'embed'
        };
        map = new google.maps.Map(document.getElementById('map'), mapOptions);

        for (let i = 0; i < 4; i++) {
            marker[i] = new google.maps.Marker({
                position: point[i],
                animation: google.maps.Animation.DROP,
                map: map,
                draggable: true
            });
            marker[i].addListener('drag', function () {
                let latlng = marker[i].getPosition();
                set_position(i, math_val(latlng.lat()), math_val(latlng.lng()));
            });
            // When drag ends, center (pan) the map on the marker position
            marker[i].addListener('dragend', function () {
                map.panTo(marker[i].getPosition());
            });
        }
        flightPath = new google.maps.Polyline({
            path: [point[0], point[1], point[2], point[3], point[0]],
            geodesic: true,
            strokeColor: "#FF0000",
            strokeOpacity: 1.0,
            strokeWeight: 2,
        });
        flightPath.setMap(map);

        <% zones = LocationZone.not_id(@location_zone.persisted? ? @location_zone.id : nil)
        if zones.present? %>
        <% zones.each { |zone| %>
        new google.maps.Polyline({
            path: [{lat: <%= zone.lat_l_t %>, lng: <%= zone.lng_l_t %>},
                {lat: <%= zone.lat_l_b %>, lng: <%= zone.lng_l_b %>},
                {lat: <%= zone.lat_r_b %>, lng: <%= zone.lng_r_b %>},
                {lat: <%= zone.lat_r_t %>, lng: <%= zone.lng_r_t %>},
                {lat: <%= zone.lat_l_t %>, lng: <%= zone.lng_l_t %>}],
            geodesic: true,
            strokeColor: generateRandomColor(),
            strokeOpacity: 1.0,
            strokeWeight: 2,
            map: map,
        });
        <% }
         end %>
    }

    function set_position(i, lat, lng) {
        point[i] = new google.maps.LatLng(lat, lng);
        switch (i) {
            case 0:
                document.getElementById('lat_l_t').value = lat;
                document.getElementById('lng_l_t').value = lng;
                break;
            case 1:
                document.getElementById('lat_l_b').value = lat;
                document.getElementById('lng_l_b').value = lng;
                break;
            case 2:
                document.getElementById('lat_r_b').value = lat;
                document.getElementById('lng_r_b').value = lng;
                break;
            case 3:
                document.getElementById('lat_r_t').value = lat;
                document.getElementById('lng_r_t').value = lng;
                break;
        }

        flightPath.setMap(null);
        flightPath = new google.maps.Polyline({
            path: [point[0], point[1], point[2], point[3], point[0]],
            geodesic: true,
            strokeColor: "#FF0000",
            strokeOpacity: 1.0,
            strokeWeight: 2,
        });
        flightPath.setMap(map);
    }

    $(function () {
        initMap();
    });

    function math_val(v) {
        return (Math.round(v * 1000000)) / 1000000;
    }

    function generateRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }
</script>