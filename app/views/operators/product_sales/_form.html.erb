<style>
  .timepicker-picker a {
    color: #337ab7;
    text-decoration: none;
  }

  .select-time .bootstrap-select {
    display: inline-block;
    width: 60px !important;
  }
</style>
<% content_for :stylesheets do -%>
  <%= stylesheet_link_tag "form" %>
  <%= stylesheet_link_tag "admin-lte/plugins/iCheck/all" %>
<% end %>

<% provide :head_tags do %>
  <script type="text/javascript"
          src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_KEY'] %>&libraries=places"></script>
<% end %>

<div class="content-wrapper">
  <section class="content-header">
    <h1>
      <% if @product_sale.parent_id.present? %>
        Буцаалт, солилт
      <% else %>
        <%= t('activerecord.models.product_sale') + t(@product_sale.persisted? ? 'titles.edit' : 'titles.add') %>
      <% end %>
    </h1>
  </section>

  <section class="content">
    <div class="box box-info">
      <%= form_with model: @product_sale, url: @product_sale.persisted? ? operators_product_sale_path : operators_product_sales_path,
                    method: @product_sale.persisted? ? :patch : :post, local: true, :html => {class: 'form-horizontal'} do |f| %>
        <%= f.hidden_field :sale_call_id %>
        <%= f.hidden_field :parent_id %>
        <%= f.hidden_field :source %>
        <%= form_body do %>
          <div class="col-md-12 p-0">
            <div class="row">
              <div class="col-md-12">
                <div class="col-md-8">
                  <div class="row">
                    <div class="col-md-6 field_div">
                      <%= f.label :phone, class: 'control-label' %>
                      <div class="<%= get_error_class(@product_sale, :phone) %>">
                        <%= field_errors(@product_sale, :phone) %>
                        <%= f.number_field :phone, class: 'form-control', oninput: "load_phone_bonus()", placeholder: t('activerecord.attributes.product_sale.phone'), id: 'phone_number' %>
                      </div>
                    </div>
                    <div class="col-md-3 field_div">
                      <%= f.label :delivery_start, class: 'control-label' %> <span class="asterisk">*</span>
                      <div class="input-append date input-group date <%= get_error_class(@product_sale, :delivery_start) %>" data-provide="datepicker" style="width: 180px">
                        <%= field_errors(@product_sale, :delivery_start) %>
                        <%= f.text_field :delivery_start, value: @product_sale.delivery_start.strftime('%F'), class: 'field form-control', placeholder: t('activerecord.attributes.product_sale.delivery_start') %>
                        <div class="input-group-addon">
                          <i class="fa fa-calendar"></i>
                        </div>
                      </div>
                    </div>
                    <div class="col-md-3 field_div select-time">
                      <%= f.label :delivery_end, class: 'control-label' %> <span class="asterisk">*</span>
                      <br>
                      <%= field_errors(@product_sale, :hour_end) %>
                      <%= f.select :hour_start, (@product_sale.delivery_end.present? ? 0 : @product_sale.hour_now.to_i)..23, {}, {class: 'form-control selectpicker'} %> &nbsp;-&nbsp;
                      <%= f.select :hour_end, (@product_sale.delivery_end.present? ? 0 : @product_sale.hour_now.to_i)..23, {}, {class: 'form-control selectpicker'} %>
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-md-11 field_div">
                      <%= f.label :location_id, class: 'control-label' %>
                      <div class="<%= get_error_class(@product_sale, :location_id) %>">
                        <%= field_errors(@product_sale, :location_id) %>

                        <%= f.collection_select(:location_id, Location.search_by_id(@product_sale.location_id), :id, :full_name,
                                                {:prompt => t('controls.select.none')}, {class: 'form-control selectpicker', "data-live-search": "true"}) %>
                      </div>
                    </div>
                    <div class="col-md-1 field_div" style="padding-left: 0;padding-right: 2px">
                      <%= render 'modal_location' %>
                    </div>
                  </div>

                  <div class="row">
                    <div class="col-md-3 field_div">
                      <%= f.label :country, class: 'control-label' %>
                      <div class="<%= get_error_class(@product_sale, :country) %>">
                        <%= field_errors(@product_sale, :country) %>
                        <%= f.check_box :country, class: 'icheck' %>
                      </div>
                    </div>
                    <div class="col-md-6 field_div">
                      <%= f.label :loc_note, class: 'control-label' %>
                      <div class="<%= get_error_class(@product_sale, :loc_note) %>">
                        <%= field_errors(@product_sale, :loc_note) %>
                        <%= f.text_area :loc_note, class: 'form-control', placeholder: t('activerecord.attributes.product_sale.loc_note') %>
                      </div>
                    </div>
                    <div class="col-md-3 field_div">
                      <%= f.label :building_code, class: 'control-label' %>
                      <div class="<%= get_error_class(@product_sale, :building_code) %>">
                        <%= field_errors(@product_sale, :building_code) %>
                        <%= f.text_field :building_code, class: 'form-control', placeholder: t('activerecord.attributes.product_sale.building_code') %>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-md-4" style="padding: 0">
                  <div id="selected_map" style="position:absolute;right: 0;width:100%;background-color: lightgrey;height: 218px"></div>
                </div>
              </div>
            </div>
            <% is_exchange = @product_sale.parent_id.present?
               if is_exchange %>
              <div class="col-md-12 field_div">
                <label class="control-label" for="product_sale_product_returns">Буцаах бараа</label>
                <div class="cocoon-nested-form">
                  <div class="<%= get_error_class(@product_sale, :product_returns) %>">
                    <%= field_errors(@product_sale, :product_returns) %>
                    <table class="table table-bordered" id="tb_product_sale_returns">
                      <tr>
                        <th class="va-mid" class="va-mid"><%= t('activerecord.attributes.product_feature_item.image') %></th>
                        <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.product_id') %></th>
                        <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.feature_item_id') %></th>
                        <th class="va-mid" style="font-size: 11px"><%= t('activerecord.attributes.product_sale_item.quantity') %></th>
                        <th class="va-mid" style="width: 200px"><%= t('activerecord.attributes.product_sale_item.price') %></th>
                        <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.sum_price') %></th>
                        <th width="50px"></th>
                      </tr>
                      <%= f.fields_for :product_sale_returns do |m| %>
                        <%= render 'product_sale_return_fields', :f => m %>
                      <% end %>
                    </table>
                  </div>
                </div>
              </div>
            <% end %>
            <div class="col-md-12 field_div">
              <label class="control-label" for="product_sale_product_sale_items"><%= is_exchange ? 'Өгөх бараа' : t('activerecord.attributes.product_sale.product_sale_items') %></label>
              <div class="cocoon-nested-form">
                <div class="<%= get_error_class(@product_sale, :product_sale_items) %>">
                  <%= field_errors(@product_sale, :product_sale_items) %>
                  <table class="table table-bordered" id="tb_product_sale_items">
                    <tr>
                      <th class="va-mid" class="va-mid"><%= t('activerecord.attributes.product_feature_item.image') %></th>
                      <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.product_id') %></th>
                      <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.feature_item_id') %></th>
                      <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.to_see') %></th>
                      <th class="va-mid" style="font-size: 11px"><%= t('activerecord.attributes.product_sale_item.quantity') %></th>
                      <th class="va-mid" style="width: 200px"><%= t('activerecord.attributes.product_sale_item.price') %></th>
                      <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.p_discount') %></th>
                      <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.discount') %></th>
                      <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.sum_price') %></th>
                      <th class="va-mid"><%= t('activerecord.attributes.product_sale_item.remainder') %></th>
                      <th width="50px"></th>
                    </tr>
                    <%= f.fields_for :product_sale_items do |m| %>
                      <%= render 'product_sale_item_fields', :f => m %>
                    <% end %>
                  </table>
                </div>
                <div class="links item_append">
                  <%= link_to_add_association f, :product_sale_items, data: {association_insertion_node: '#tb_product_sale_items', association_insertion_method: :append} do %>
                    <%= nested_add_btn('btn_product_sale_item') %>
                  <% end %>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-12">
                <div class=" col-md-3 field_div">
                  <%= f.label :sum_price, class: 'control-label' %>
                  <div class="">
                    <%= f.hidden_field :sum_price %>
                    <%= text_field_tag :sum_price, @product_sale.sum_price.present? ? get_currency_mn(@product_sale.sum_price - (@product_sale.bonus.presence || 0)) : nil,
                                       {class: 'form-control field', readonly: true, placeholder: t('activerecord.attributes.product_sale.sum_price')} %>
                  </div>
                </div>
                <div class="col-md-4 field_div">
                  <%= f.label :money, class: 'control-label' %>
                  <div class="radio-group p-t-5 money_select <%= get_error_class(@product_sale, :money) %>">
                    <%= field_errors(@product_sale, :money) %>
                    <%= f.collection_radio_buttons :money, ProductSale.money_i18n, :first, :second do |b| %>
                      <%= b.radio_button %>&nbsp;&nbsp;<%= b.text %> &nbsp;&nbsp;
                    <% end %>
                  </div>
                </div>
                <div class="col-md-3 field_div">
                  <label class="control-label" for="product_sale_bonus">Бонус:
                    <span id="bonus_available"><%= (@product_sale.present? && @product_sale.sum_price.present? && @product_sale.sum_price > 0) ? get_currency_mn(@product_sale.sum_price / 2) : 0 %></span>
                    / <span id="bonus_extra"><%= get_currency_mn(@product_sale.bonus_show) %></span></label>
                  <div class="<%= get_error_class(@product_sale, :bonus) %>">
                    <%= field_errors(@product_sale, :bonus) %>
                    <%= f.number_field :bonus, class: 'form-control', oninput: "set_bonus()", placeholder: t('activerecord.attributes.product_sale.bonus') %>
                  </div>
                </div>
                <div class="col-md-2 field_div">
                  <%= f.label :tax, class: 'control-label' %>
                  <div class="<%= get_error_class(@product_sale, :tax) %>">
                    <%= field_errors(@product_sale, :tax) %>
                    <%= f.check_box :tax %>
                  </div>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-12">
                <div class="col-md-4 field_div">
                  <%= f.label :status_id, class: 'control-label' %>
                  <div class="<%= get_error_class(@product_sale, :status_id) %>">
                    <%= f.hidden_field :status_id %>
                    <%= field_errors(@product_sale, :status_id) %>
                    <%= f.collection_select :status_m, ProductSaleStatus.by_previous.by_type('oper', @product_sale.persisted? ? @product_sale.status_m : nil), :id, :name,
                                            {:include_blank => t('controls.select.none')}, {class: 'form-control selectpicker', onchange: 'call_next_status(this)'} %>
                  </div>
                </div>
                <div id="paid_div" class="col-md-4 field_div <%= (@product_sale.persisted? && !@product_sale.cash?) ? '' : 'none' %>">
                  <%= f.label :paid, class: 'control-label' %>
                  <div class="<%= get_error_class(@product_sale, :paid) %>">
                    <%= field_errors(@product_sale, :paid) %>
                    <%= f.number_field :paid, class: 'form-control', placeholder: t('activerecord.attributes.product_sale.paid') %>
                  </div>
                </div>
                <div id="div_status_sub" class="col-md-4 field_div <%= @product_sale.status_sub.present? ? '' : 'none' %>">
                  <label class="control-label" for="product_sale_status_sub" style="margin-bottom: 15px"></label>
                  <div id="status" class="<%= get_error_class(@product_sale, :status_sub) %>">
                    <%= field_errors(@product_sale, :status_sub) %>
                    <%= f.collection_select :status_sub, ProductSaleStatus.by_previous(@product_sale.status_m).by_type('oper'), :id, :name,
                                            {:include_blank => t('controls.select.none')}, {class: 'form-control selectpicker', onchange: 'call_set_status(this)'} %>
                  </div>
                </div>

              </div>
            </div>
            <div class="row">
              <div class="col-md-12">
                <div class="col-md-4 field_div">
                  <%= f.label :status_note, class: 'control-label' %>
                  <div class="<%= get_error_class(@product_sale, :status_note) %>">
                    <%= field_errors(@product_sale, :status_note) %>
                    <%= f.text_area :status_note, class: 'form-control', placeholder: t('activerecord.attributes.product_sale.status_note') %>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="action-buttons">
            <%= f.submit t('controls.button.save'), class: 'btn btn-warning' %>
          </div>
        <% end %>
      <% end %>
    </div>
  </section>
</div>
<%= render 'shared/suggestion_search' %>
<%= render 'shared/product_status_js', select_id: 'product_sale_status_id' %>
<% content_for :footer_js do -%>
  <%= javascript_include_tag 'admin-lte/plugins/iCheck/icheck.min' %>
<% end %>
<script>
    function location_input_press(select, url) {
        select.parent().find('.bs-searchbox').find('input').keydown(function (e) {
            if (e.which === 13) {
                Rails.ajax({
                    url: url,
                    type: "POST",
                    data: "text=" + $(this).val() + "&id=" + select.attr('id') + "&country=" + $('#product_sale_country').prop('checked'),
                    success: function (data) {
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            }
        });
    }

    var to_see = false;

    $(window).on('load', function () {
        $('input[type="checkbox"].icheck').iCheck({
            checkboxClass: 'icheckbox_flat-blue'
        });
        $('tr.nested-fields .selectpicker').selectpicker('refresh');

        $('#tb_product_sale_items .nested-fields select').each(function () {
            select_input_press($(this), "<%= search_product_path %>", false);
        });
        <% if @product_sale.persisted? && @product_sale.is_exchange %>
        $('select.feature_item option:not(:selected)').attr('disabled', true);
        calc_total_price();
        <% end %>
        $('#btn_product_sale_item').on('click', function () {
            if ($('#tb_product_sale_items tbody tr').length > 0) {
                let tr = $('#tb_product_sale_items tbody tr:last');
                to_see = tr.find('td').eq(2).find('input[type=checkbox]').is(":checked");
                setTimeout(set_column_value, 200);
            }
            setTimeout(set_product_sale_item, 300);
        });
        let location_select = $('#product_sale_location_id');
        location_select.on('change', function () {
            let id = $(this).val();
            if (valid_id(id)) {
                Rails.ajax({
                    url: "<%= get_location_operators_locations_path %>",
                    type: "POST",
                    data: "id=" + id,
                    success: function (data) {
                        selected_locatoion_refresh_marker(data.latitude, data.longitude);
                        calc_time(location_select);
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            }
        });
        $('div.money_select input').on('change', function () {
            if ($(this).prop('checked')) {
                let paid_div = $('div#paid_div');
                if ($(this).val() === 'cash') {
                    paid_div.addClass('none');
                } else paid_div.removeClass('none');
            }
        });
        location_input_press(location_select, "<%= search_locations_operators_product_sales_path %>");

        $('#product_sale_country').on('ifChanged', function (e) {
            if (e.target.checked) {
                $('#product_sale_money_account').prop('checked', true);
                $('div#paid_div').removeClass('none');
            }
            // location_select.val("").selectpicker("refresh");
        });
        initSelectedMap();
    });

    function set_product_sale_item() {
        let last_tr = "#tb_product_sale_items .nested-fields:last";
        $(last_tr).find('.selectpicker').selectpicker('refresh');
        select_input_press($(last_tr + ' select:first'), "<%= search_product_path %>", false);
    }

    function set_column_value() {
        let tr = $('#tb_product_sale_items tbody tr:last');
        tr.find('td').eq(2).find('input[type=checkbox]').prop("checked", to_see);
    }

    function func_change_product(select) {
        let product_id = $(select).val();
        let parentTr = select_parent(select);
        parentTr.find("select.feature_item").html("").selectpicker("refresh");
        reset_input_vals(parentTr);
        if (valid_id(product_id)) {
            Rails.ajax({
                url: "<%= get_product_features_path %>",
                type: "PATCH",
                data: "product_id=" + product_id,
                success: function (data) {
                    var features = data.features;
                    if (features !== undefined && features.length > 0) {
                        var divSelect = "<option value=''>Сонгох</option>";
                        var first_feature_id = 0;
                        for (var i = 0; i < features.length; i++) {
                            if (i === 0) {
                                first_feature_id = features[i]["id"];
                            }
                            divSelect += '<option value="' + features[i]["id"] + '" data-subtext="' + features[i]["balance"] + '" product="' + features[i]["product"] + '" >' + features[i]["name"] + '</option>';
                        }
                        let select = parentTr.find("select.feature_item");
                        select.html(divSelect);
                        if (features.length === 1) {
                            select.val(first_feature_id);
                            func_change_feature(select);
                        }
                        select.selectpicker("refresh");
                    }
                    parentTr.find('.image').html("<a href='<%= ENV['WEB_DOMAIN'] %>products/" + product_id + "' target='_blank'> <img src='" + data.tumb + "', class='thumb'></a>");
                    parentTr.find("input.item_price").attr('price', data.price).val(getDecimalPay(data.price));

                    calc_total_price();
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }
    }

    function reset_input_vals(tr) {
        $("#total_price").val("");
        tr.find("input.item_sum").val("");
        tr.find("input.item_price").val("");
    }

    function func_change_feature(select) {
        let product_id = $(select).find('option:selected').attr("product");
        let parentTr = select_parent(select);
        reset_input_vals(parentTr);

        let feature_id = $(select).val();
        if (valid_id(feature_id) && valid_id(product_id)) {
            Rails.ajax({
                url: "<%= get_product_balance_operators_product_sales_path %>",
                type: "POST",
                data: "product_id=" + product_id + "&feature_item_id=" + feature_id,
                success: function (data) {
                    let p = parentTr.find("input.item_price");
                    p.val(data.price);
                    p.attr('price', data.price);
                    p.attr('p_6_8', data.p_6_8);
                    p.attr('p_9_', data.p_9_);
                    parentTr.find("input.item_price_show").val(getDecimalPay(data.price));
                    parentTr.find('.remainder').val(data.balance);
                    parentTr.find('.image a').html("<img src='" + data.tumb + "', class='tumb'>");
                    calc_total_price();
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }
    }

    function calc_total_price() {
        var total_price = 0, give_back = 0;
        $('#tb_product_sale_returns tr.nested-fields').each(function () {
            let tr = $(this);
            if (tr.is(':visible')) {
                let quantity = tr.find('.return_quantity').val();
                if (quantity !== undefined && quantity.length > 0) {
                    let price = tr.find('.item_price').attr('price');
                    give_back += parseInt(price) * parseInt(quantity);
                }
            }
        });
        $('#tb_product_sale_items tr.nested-fields').each(function () {
            let tr = $(this);
            if (tr.is(':visible')) {
                let td_qau = tr.find('.item_quantity');
                let quantity = td_qau.val();
                if (quantity !== undefined && quantity.length > 0) {
                    let price_tr = tr.find('.item_price');
                    let price = 0;
                    if (quantity < 6) {
                        price = price_tr.attr('price');
                    } else if (quantity > 8) {
                        price = price_tr.attr('p_9_');
                    } else {
                        price = price_tr.attr('p_6_8');
                    }

                    let p_discount = tr.find("input.item_p_discount").val();
                    if (p_discount.length > 0) {
                        price = parseInt(p_discount)
                    } else {
                        let discount = tr.find("input.item_discount").val();
                        if (discount.length > 0) {
                            price -= get_percentage(price, parseInt(discount))
                        }
                    }
                    price = Math.floor(price);
                    tr.find("input.item_price_show").val(getDecimalPay(price));
                    price_tr.val(price);

                    let sum_price = price * parseInt(quantity);
                    tr.find('.item_sum').val(sum_price);
                    tr.find('.item_sum_show').val(getDecimalPay(sum_price));
                    if (quantity > 0) {
                        total_price += sum_price;
                    }
                }
            }
        });

        if (total_price > 0 && give_back === 0) {
            total_price += (total_price > 0 && total_price < <%= Const::FREE_SHIPPING %>) ? <%= Const::SHIPPING_FEE %> : 0;
        }
        $('#product_sale_sum_price').val(total_price - give_back);
        $('#bonus_available').text(total_price > 0 ? getDecimalPay(total_price / 2) : 0);

        let bonus = $('#product_sale_bonus').val();
        if (bonus.length > 0) {
            total_price -= parseInt(bonus);
        }
        $('#sum_price').val(getDecimalPay(total_price - give_back));
    }

    function set_bonus() {
        let bonus = $('#product_sale_bonus').val();
        let sum_price = $('#product_sale_sum_price').val();
        $('#sum_price').val(getDecimalPay(sum_price - (bonus.length > 0 ? bonus : 0)));
    }

    function calc_time(select) {
        let option = select.find('option:selected');
        if (option !== undefined) {
            let distance = option.attr('distance');
            let start = parseInt($('#product_sale_hour_start').val());
            let end = $('#product_sale_hour_end');
            var end_val = 0;
            if (distance === "distance_a") {
                end_val = start + 1;
            } else if (distance === "distance_b") {
                end_val = start + 2;
            } else {
                end_val = start + 3;
            }
            if (end_val < 24) {
                end.val(end_val).selectpicker("refresh");
            }
        }
    }

    var selected_map = null, selected_marker;

    function initSelectedMap() {
        let lat = 47.918772;
        let lng = 106.917609;
        <% if @product_sale.location.present? %>
        lat = <%= @product_sale.location.latitude %>;
        lng = <%= @product_sale.location.longitude %>;
        <% end %>
        let myCoords = new google.maps.LatLng(lat, lng);
        let mapOptions = {
            center: myCoords,
            zoom: 15,
            mapTypeId: 'hybrid',
            output: 'embed',
            streetViewControl: false,
            mapTypeControl: false,
        };
        selected_map = new google.maps.Map(document.getElementById('selected_map'), mapOptions);
        selected_marker = new google.maps.Marker({
            position: myCoords,
            animation: google.maps.Animation.DROP,
            map: selected_map
        });
        push_radius_sales();
    }

    function selected_locatoion_refresh_marker(lat, lng) {
        let myCoords = new google.maps.LatLng(lat, lng);
        selected_marker.setPosition(myCoords);
        selected_map.setCenter(selected_marker.getPosition());

        Rails.ajax({
            url: "<%= get_radius_sales_operators_product_sales_path %>",
            type: "POST",
            data: "delivery_start=<%= @product_sale.delivery_start.strftime('%F') %>&latitude=" + lat + "&longitude=" + lng
        });
    }

    function load_phone_bonus() {
        let inp = $('#phone_number');
        if (inp.val().length === 8) {
            Rails.ajax({
                url: "<%= get_bonus_operators_product_sales_path %>",
                type: "POST",
                data: "phone=" + inp.val(),
                success: function (data) {
                    $('#bonus_extra').text(data.bonus);
                }
            });
        }
    }

    let a_time = [], a_phone = [], a_address = [],
        a_ids = [], a_latitude = [], a_longitude = [],
        a_salesman_travel = [], marker_sales = [];

    function push_radius_sales() {
        a_time = [];
        a_phone = [];
        a_address = [];
        a_ids = [];
        a_latitude = [];
        a_longitude = [];
        a_salesman_travel = [];
        <% if @radius_sales.present?
        @radius_sales.each { |sale|
        location = sale.location %>
        a_ids.push(<%= sale.id %>);
        a_latitude.push(<%= location.latitude %>);
        a_longitude.push(<%= location.longitude %>);
        a_address.push("<%= location.full_name %>");
        a_phone.push(<%= sale.phone %>);
        a_time.push("<%= sale.delivery_time.gsub('&nbsp;',' ') %>");
        a_salesman_travel.push(<%= sale.salesman_travel.present? %>);
        <% }
        end %>
        set_radius_sales();
    }

    function remove_markers(markers) {
        for (let i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
    }

    function set_radius_sales() {
        remove_markers(marker_sales);
        marker_sales = [];

        for (let i = 0; i < a_ids.length; i++) {
            let latLng = new google.maps.LatLng(a_latitude[i], a_longitude[i]);
            let image = {
                url: "/images/map/" + (a_salesman_travel[i] ? 'green' : 'yellow') + "-dot.png",
                labelOrigin: new google.maps.Point(15, 10)
            };
            const m = new google.maps.Marker({
                position: latLng,
                map: selected_map,
                icon: image
            });
            google.maps.event.addListener(m, 'click', function () {
                infowindow = new google.maps.InfoWindow({
                    content: '<p>Цаг: ' + a_time[i] + '</p>' +
                        '<p>Утас: ' + a_phone[i] + '</p>' +
                        '<p>Хаяг: ' + a_address[i] + '</p>',
                    position: latLng,
                });
                infowindow.open(selected_map);
            });
            marker_sales.push(m);
        }
    }
</script>